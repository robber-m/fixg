// AUTO-GENERATED by build.rs. Do not edit by hand.
use crate::protocol::{FixMessage, FixMsgType};
use std::convert::TryFrom;

/// Administrative FIX messages used for session management.
/// 
/// These messages handle the establishment, maintenance, and termination
/// of FIX sessions between counterparties.
#[derive(Debug, Clone)]
pub enum AdminMessage {
    /// Logon message to initiate a FIX session
    Logon {
        /// Heartbeat interval in seconds
        heart_bt_int_secs: Option<u32>,
        /// Sender's company ID
        sender_comp_id: Option<String>,
        /// Target company ID
        target_comp_id: Option<String>,
    },
    /// Heartbeat message to maintain session connectivity
    Heartbeat { 
        /// Test request ID if this heartbeat is in response to a test request
        test_req_id: Option<String> 
    },
    /// Test request message to verify session connectivity
    TestRequest { 
        /// Unique identifier for this test request
        id: String 
    },
    /// Logout message to terminate a FIX session
    Logout { 
        /// Optional reason for logout
        text: Option<String> 
    },
}

impl TryFrom<&FixMessage> for AdminMessage {
    type Error = ();
    fn try_from(msg: &FixMessage) -> Result<Self, Self::Error> {
        match msg.msg_type {
            FixMsgType::Logon => {
                let hb = msg.fields.get(&108).and_then(|s| s.parse::<u32>().ok());
                let sender = msg.fields.get(&49).cloned();
                let target = msg.fields.get(&56).cloned();
                Ok(AdminMessage::Logon { heart_bt_int_secs: hb, sender_comp_id: sender, target_comp_id: target })
            }
            FixMsgType::Heartbeat => {
                let id = msg.fields.get(&112).cloned();
                Ok(AdminMessage::Heartbeat { test_req_id: id })
            }
            FixMsgType::TestRequest => {
                if let Some(id) = msg.fields.get(&112) {
                    Ok(AdminMessage::TestRequest { id: id.clone() })
                } else {
                    Err(())
                }
            }
            FixMsgType::Logout => {
                let text = msg.fields.get(&58).cloned();
                Ok(AdminMessage::Logout { text })
            }
            FixMsgType::ResendRequest | FixMsgType::SequenceReset | FixMsgType::Unknown(_) => Err(()),
        }
    }
}

impl AdminMessage {
    pub fn into_fix(self, sender_comp_id: &str, target_comp_id: &str) -> FixMessage {
        let mut msg = match self {
            AdminMessage::Logon { heart_bt_int_secs, .. } => {
                let mut m = FixMessage::new(FixMsgType::Logon);
                if let Some(hb) = heart_bt_int_secs { m.fields.insert(108, hb.to_string()); }
                m
            }
            AdminMessage::Heartbeat { test_req_id } => {
                let mut m = FixMessage::new(FixMsgType::Heartbeat);
                if let Some(id) = test_req_id { m.fields.insert(112, id); }
                m
            }
            AdminMessage::TestRequest { id } => {
                let mut m = FixMessage::new(FixMsgType::TestRequest);
                m.fields.insert(112, id);
                m
            }
            AdminMessage::Logout { text } => {
                let mut m = FixMessage::new(FixMsgType::Logout);
                if let Some(t) = text { m.fields.insert(58, t); }
                m
            }
        };
        // Standard header fields commonly set by applications
        msg.fields.insert(49, sender_comp_id.to_string());
        msg.fields.insert(56, target_comp_id.to_string());
        msg
    }
}
